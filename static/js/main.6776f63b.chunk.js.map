{"version":3,"sources":["components/Snow/index.js","components/RippleButton/index.js","components/Title/index.js","components/Timer/index.js","components/Tags/index.js","components/Mplayer/index.js","App.js","serviceWorker.js","index.js"],"names":["SNOW_NUMBER","Snow","list","i","push","className","map","item","index","key","RippleButton","children","onClick","bgc","useState","x","y","coords","setCoords","isRippling","setIsRippling","useEffect","setTimeout","style","background","e","rect","target","getBoundingClientRect","clientX","left","clientY","top","Title","title","textAlign","href","color","fontSize","Timer","endTime","end","Date","parse","day","setDay","hour","setHour","minute","setMinute","second","setSecond","timer","remaining","setInterval","Math","floor","clearInterval","countFn","Tags","rel","src","alt","width","height","Mplayer","props","apRef","useRef","play","setPlay","ref","ms","autoplay","onPlay","onPause","changeStatus","stopPropagation","status","current","control","pause","opacity","zIndex","position","borderRadius","bottom","MS","theme","lrcType","audio","name","artist","url","cover","lrc","App","setStatus","window","open","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6776f63b.chunk.js","sourcesContent":["import React from 'react';\nimport './index.scss';\n\nconst SNOW_NUMBER = 150;\n\nfunction Snow() {\n  let list = [];\n  for (let i = 0; i < SNOW_NUMBER; i++) {\n    list.push(i);\n  };\n  return <div className=\"snow\">\n    {\n      list.map((item, index) => {\n        return <div className={`snow${item + 1}`} key={index}>❉</div>\n      })\n    }\n  </div>\n}\n\nexport default Snow;","import React, { useState, useEffect } from 'react';\nimport './index.scss';\n\nfunction RippleButton({ children, onClick, bgc=[] }) {\n  const [coords, setCoords] = useState({ x: -1, y: -1 });\n  const [isRippling, setIsRippling] = useState(false);\n\n  useEffect(\n    () => {\n      if (coords.x !== -1 && coords.y !== -1) {\n        setIsRippling(true);\n        setTimeout(() => setIsRippling(false), 1200);\n      } else setIsRippling(false);\n    },\n    [coords]\n  );\n\n  useEffect(\n    () => {\n      if (!isRippling) setCoords({ x: -1, y: -1 });\n    },\n    [isRippling]\n  );\n\n  return <button\n    className=\"ripple-button\"\n    style={{\n      background: bgc[0] || '#1976d2'\n    }}\n    onClick={e => {\n      var rect = e.target.getBoundingClientRect();\n      var x = e.clientX - rect.left;\n      var y = e.clientY - rect.top;\n      setCoords({ x, y });\n      onClick && onClick(e);\n    }}\n  >\n    {isRippling ? (\n      <span\n        className=\"ripple\"\n        style={{\n          left: coords.x + 10,\n          top: coords.y,\n          background: bgc[1] || '#63a4ff'\n        }}\n      />\n    ) : (\n        \"\"\n      )}\n    <span className=\"content\">{children}</span>\n  </button>\n}\n\nexport default RippleButton","import React from 'react';\nimport './index.scss'\n\nfunction Title({ title }) {\n  return <div style={{ textAlign: 'center' }}>\n    <h1 className=\"title\">\n      <a href=\"jascript:void 0\" title=\"去主页\">{title}</a>\n    </h1>\n    <span style={{ color: 'rgba(255,255,255,.9)', fontSize: '12px' }}>最帅攻城湿</span>\n  </div>\n\n}\n\nexport default Title;","import React, { useState, useEffect } from 'react';\nimport './index.scss'\n\nfunction Timer({ title, endTime }) {\n  const end = Date.parse(new Date(endTime));\n\n  let [day, setDay] = useState(0);\n  let [hour, setHour] = useState(0);\n  let [minute, setMinute] = useState(0);\n  let [second, setSecond] = useState(0);\n\n  useEffect(() => {\n    let timer;\n    const countFn = end => {\n      let nowTime = Date.parse(new Date());\n      let remaining = end - nowTime;\n\n      timer = setInterval(() => {\n        //防止出现负数\n        if (remaining > 1000) {\n          remaining -= 1000;\n          setDay(Math.floor((remaining / 1000 / 3600) / 24));\n          setHour(Math.floor((remaining / 1000 / 3600) % 24));\n          setMinute(Math.floor((remaining / 1000 / 60) % 60));\n          setSecond(Math.floor(remaining / 1000 % 60));\n        } else {\n          clearInterval(timer);\n        }\n      }, 1000);\n    }\n    countFn(end);\n    return () => clearInterval(timer)\n  }, [end]);\n\n  return <div className=\"timer\">\n    <h2 className=\"title\">{title}</h2>\n    <div className=\"time\">\n      {\n        [day, hour, minute, second].map((item, index) => <span key={index}>\n          <div>{item < 10 ? '0' + item : item}</div>\n          <div>{['天', '时', '分', '秒'][index]}</div>\n        </span>)\n      }\n    </div>\n  </div>\n}\n\nexport default Timer;","import React from 'react';\nimport './index.scss'\n\nfunction Tags() {\n  return <div className=\"tags\">\n    <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/sethvoler\">\n      <img src=\"https://img.shields.io/badge/GitHub-Follow-brightgreen\" alt=\"GitHub\"></img>\n    </a>\n    <div className=\"navs\">\n      <nav className=\"nav\">\n        <ul className=\"items\">\n          <li className=\"\"><a rel=\"noopener noreferrer\" href=\"https://www.douban.com/group/topic/162657094/\" title=\"豆瓣\" className=\"item\" target=\"_blank\">豆瓣</a></li>\n          <li className=\"\"><a rel=\"noopener noreferrer\" href=\"https://www.jianshu.com/u/13660c55a2dc\" title=\"简书\" className=\"item\" target=\"_blank\">简书</a></li>\n        </ul>\n      </nav>\n      <nav className=\"nav secNav\">\n        <ul className=\"items\">\n          <li className=\"item\">\n            <a rel=\"noopener noreferrer\" href=\"https://github.com/sethvoler/voler\" title=\"SethVoler on GitHub\" target=\"_blank\">\n              <img src=\"assets/github-logo.png\" width=\"21px\" height=\"21px\" alt=\"GitHub\" />\n            </a>\n          </li>\n        </ul>\n      </nav>\n    </div>\n  </div>\n\n}\n\nexport default Tags;","import React, { useState, useRef } from 'react';\nimport ReactAplayer from 'react-aplayer';\nimport './index.scss';\n\nfunction Mplayer(props) {\n  const apRef = useRef();\n  let [play, setPlay] = useState(true);\n\n  const onPlay = () => {\n    setPlay(false);\n  }\n  const onPause = () => {\n    setPlay(true);\n  };\n  const toPlay = () => {\n    setPlay(false);\n    apRef.current.control.pause();\n  }\n\n  const toPause = () => {\n    setPlay(true);\n    apRef.current.control.play();\n  }\n\n  const toggle = () => {\n    props.changeStatus();\n  }\n  return <div className=\"mplayer\">\n    <ReactAplayer\n      ref={apRef}\n      {...props.ms}\n      autoplay\n      onPlay={onPlay}\n      onPause={onPause}\n    />\n    <div className=\"btn\">\n      <span className=\"toggle\" \n        onClick={e => { \n          toggle(); \n          e.stopPropagation(); \n        }}>{props.status ? '>' : '<'}</span>\n      <span\n        className={play ? \"pause\" : \"play\"}\n        onClick={() => {\n          !play\n            ? toPlay()\n            : toPause();\n        }}\n        style={{\n          opacity: props.status ? 1 : 0,\n          zIndex: props.status ? 1 : -1,\n          position: 'absolute',\n          width: '24px',\n          height: '24px',\n          background: 'rgba(20,20,20,.3)',\n          borderRadius: '12px',\n          left: '4px',\n          bottom: '2px',\n        }}></span>\n    </div>\n  </div>\n\n}\n\nexport default Mplayer;","import React, { useState } from 'react';\nimport './App.scss';\nimport Snow from './components/Snow';\nimport RippleButton from './components/RippleButton';\nimport Title from './components/Title';\nimport Timer from './components/Timer';\nimport Tags from './components/Tags';\nimport Mplayer from './components/Mplayer';\n\nconst MS = {\n  theme: '#F57F1711',\n  lrcType: 3,\n  audio: [\n    {\n      name: '忽然之间',\n      artist: '捧着奶瓶逛青楼 / 风华哥',\n      url: 'assets/1.m4a',\n      cover: 'assets/lrc/1.jpg',\n      lrc: 'assets/lrc/1.lrc',\n      theme: '#ebd0c2'\n    },\n    {\n      name: 'Lazy',\n      artist: '等一个人哎 / 风华哥',\n      url: 'assets/2.m4a',\n      cover: 'assets/lrc/2.jpg',\n      lrc: 'assets/lrc/2.lrc',\n      theme: '#ebd0c2'\n    }\n  ]\n}\n\nfunction App() {\n  let [status, setStatus] = useState(true);\n  const changeStatus = status => {\n    status ? setStatus(false) : setStatus(true);\n  }\n  return (\n    <div className=\"App\">\n      <div className={status ? \"hideWrap\" : \"playerWrap\"}>\n        <Mplayer ms={MS} status={status} changeStatus={() => changeStatus(status)} />\n      </div>\n      <Timer title=\"新年倒计时\" endTime=\"2020-01-24 24:00\" />\n      <Title title=\"钱塘风华\" />\n      <Tags />\n      <div className=\"btns\">\n        <RippleButton\n          onClick={e => {\n            window.open();\n          }}\n        >主页</RippleButton>\n        <RippleButton\n          onClick={e => {\n            window.open('https://space.bilibili.com/226928566/');\n          }}\n          bgc={['#ff0000', '#ff9999']}\n        >离开</RippleButton>\n      </div>\n      <Snow />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}